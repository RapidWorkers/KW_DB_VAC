<% include ./common/header %>
<div class="container">

    <div class="py-4 px-3 pb-3 text-start" style="background-color: #00A3FF;">
        <h2 class="px-4 display-8 fw-bold text-white">친구 추가</h2>
    </div>

    <div class="p-5 mb-4 bg-light">
        <div class="container-fluid py-5">
            <div id="groupMemAdd">
            <form method = "POST" action = "group_mem_add" class="needs-validation" novalidate @submit.prevent="validateData">
                <div class="row g-5 align-items-center justify-content-center">
                    <div class="col-md-7 col-lg-8">
                        
                        <div class="row g-3">
                            <div class="col-12">
                                <label for="username" class="form-label">친구의 아이디</label>
                                <input type="username" class="form-control" name="username" id="username" v-model="friendName" placeholder="친구의 아이디"
                                v-bind:class = "{'is-valid': valUser, 'is-invalid': valUser === false}">
                                <div class="invalid-feedback">
                                    유효하지 않은 친구 아이디 입니다.
                                </div>
                            </div>
                            <div class="col-md-12">
                                <label class="form-label">그룹 선택</label>
                                    <select class="form-select" name = 'group' v-model="selGroup" aria-label=".form-select-lg example" @change="selectGroup"
                                    v-bind:class = "{'is-valid': valGroup, 'is-invalid': valGroup === false}">
                                        <option selected disabled hidden value="-1">그룹 선택</option>
                                        <option v-for="group in groupList" v-bind:key="" :value="group.gid">{{ group.name }}</option>
                                    </select>
                                    <div class="invalid-feedback">
                                        그룹 선택은 필수입니다.
                                    </div>
                            </div>
                        </div>
                        <hr class="my-4">
                        <button class="w-100 btn btn-primary btn-lg" id = "add_submit" type="submit">친구 추가</button>
            </form>
        </div>
        </div>
    </div>
</div>

<script>
    const axios_inst = axios.create({
            baseURL: 'http://localhost:3000/api/'
    })
    
    // 존재하는 ID인지 체크
    function usernameChk(params){
        return axios_inst.post("validate_join", params)
    }
    // api/group_api 불러오기
    function doFetchGroup(){
            return axios_inst.get("group_api")
    }

    var groupMemAddApp = new Vue({
        el: "#groupMemAdd", 
        data: {
            friendName: "",
            selGroup: "<%= selected_gid %>",
            groupList: [],
            group_id: "<%= selected_gid %>",
            valGroup: null,
            valUser: null
        },
        methods: {
            // 사용자의 그룹 리스트 로드
            loadGroupList: async function () {
                var groupData = await doFetchGroup();
                if(!groupData.data.success)
                {
                    alert("그룹 API 호출에 실패했습니다.");
                    return;
                }

                this.groupList = groupData.data.groups;
            },
            // 그룹 선택
            selectGroup: async function(){
                this.group_id = this.selGroup;
            },
            // 존재하는 사용자인지 ID 체크
            validateUser: async function(){
                var vParam = {
                    validateType: 1,
                    username: this.friendName
                }

                var vResult = await usernameChk(vParam);
                if(!vResult.data.success) this.valUser = true;
                else this.valUser = false;
            },
            // 그룹 종류(group_id)와 추가하려는 사용자(friendName)가 존재하는지 체크
            validateData: async function(e){
                if(this.group_id && this.group_id != -1) this.valGroup = true;
                else this.valGroup = false;

                if(!this.friendName) this.valUser = false;
                else await this.validateUser();

                if(this.valGroup && this.valUser) return e.target.submit();
            },
        },
        mounted: async function () {
                await this.loadGroupList();
        }
    })
</script>

<% include ./common/footer %>

